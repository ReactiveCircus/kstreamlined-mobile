import kotlin.Boolean;
import kotlinx.datetime.Instant;

CREATE TABLE feedItemEntity (
    id TEXT NOT NULL PRIMARY KEY,
    feed_origin_key TEXT NOT NULL,
    title TEXT NOT NULL,
    publish_time TEXT AS Instant NOT NULL,
    content_url TEXT NOT NULL,
    image_url TEXT,
    description TEXT,
    issue_number INTEGER,
    podcast_audio_url TEXT,
    podcast_duration TEXT,
    podcast_start_position INTEGER,
    saved_for_later INTEGER AS Boolean NOT NULL,
    FOREIGN KEY(feed_origin_key) REFERENCES feedOriginEntity(key) ON DELETE CASCADE
);

CREATE INDEX index_feedItemEntity_feed_origin_key ON feedItemEntity(feed_origin_key);
CREATE INDEX index_feedItemEntity_saved_for_later ON feedItemEntity(saved_for_later);

feedItemsForSelectedOrigins:
SELECT feedItemEntity.* FROM feedItemEntity
JOIN feedOriginEntity ON feedItemEntity.feed_origin_key = feedOriginEntity.key
WHERE feedOriginEntity.selected = 1
ORDER BY feedItemEntity.publish_time DESC;

feedItemById:
SELECT * FROM feedItemEntity WHERE id = :id;

savedFeedItems:
SELECT * FROM feedItemEntity WHERE saved_for_later = 1 ORDER BY publish_time DESC;

upsertFeedItem:
INSERT OR REPLACE INTO feedItemEntity
VALUES (:id, :feed_origin_key, :title, :publish_time, :content_url, :image_url, :description, :issue_number, :podcast_audio_url, :podcast_duration, :podcast_start_position, :saved_for_later);

updatePotcastStartPositionById:
UPDATE feedItemEntity SET podcast_start_position = :podcast_start_position WHERE id = :id;

updateSavedForLaterById:
UPDATE feedItemEntity SET saved_for_later = :saved_for_later WHERE id = :id;
